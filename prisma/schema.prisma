// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  wishlist  Wishlist?
  addresses Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Catalog Models
model Category {
  id          String    @id @default(cuid())
  name        String
  nameAr      String
  slug        String    @unique
  description String?
  descriptionAr String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryToCatagory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCatagory")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id            String           @id @default(cuid())
  name          String
  nameAr        String
  slug          String           @unique
  description   String?
  descriptionAr String?
  price         Decimal          @db.Decimal(10, 2)
  comparePrice  Decimal?         @db.Decimal(10, 2)
  sku           String?          @unique
  barcode       String?
  trackQuantity Boolean          @default(true)
  quantity      Int              @default(0)
  weight        Decimal?         @db.Decimal(8, 2)
  images        String[] 
  status        ProductStatus    @default(ACTIVE)
  published     Boolean          @default(true)
  featured      Boolean          @default(false)
  categoryId    String
  category      Category         @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  assets        Asset[]
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ProductVariant {
  id        String    @id @default(cuid())
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  nameAr    String
  value     String
  valueAr   String
  price     Decimal?  @db.Decimal(10, 2)
  sku       String?   @unique
  quantity  Int       @default(0)
  image     String?
  cartItems CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Asset {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  alt       String?
  altAr     String?
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Commerce Models
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  couponId  String?
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
  discount  Decimal    @db.Decimal(10, 2) @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
}

model Coupon {
  id               String     @id @default(cuid())
  code             String     @unique
  type             CouponType
  value            Decimal    @db.Decimal(10, 2)
  minimumAmount    Decimal?   @db.Decimal(10, 2)
  usageLimit       Int?
  usedCount        Int        @default(0)
  expiresAt        DateTime?
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  orders           Order[]
  carts            Cart[]
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  status          OrderStatus   @default(NEW)
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2) @default(0)
  shipping        Decimal       @db.Decimal(10, 2) @default(0)
  discount        Decimal       @db.Decimal(10, 2) @default(0)
  total           Decimal       @db.Decimal(10, 2)
  currency        String        @default("MRU")
  couponId        String?
  coupon          Coupon?       @relation(fields: [couponId], references: [id])
  shippingAddress Json
  billingAddress  Json
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  variant   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String          @id @default(cuid())
  orderId         String
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider        PaymentProvider
  status          PaymentStatus   @default(PENDING)
  amount          Decimal         @db.Decimal(10, 2)
  currency        String          @default("MRU")
  transactionId   String?
  paymentIntentId String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Shipment {
  id         String         @id @default(cuid())
  orderId    String
  order      Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier    String
  trackingId String?
  status     ShipmentStatus @default(PREP)
  shippedAt  DateTime?
  deliveredAt DateTime?
  metadata   Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String?
  country     String  @default("MR")
  phone       String?
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  NEW
  PENDING
  PAID
  FULFILLED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  BANKILY
  MASRIFI
  SADAD
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ShipmentStatus {
  PREP
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum AddressType {
  SHIPPING
  BILLING
}